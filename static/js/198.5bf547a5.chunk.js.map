{"version":3,"file":"static/js/198.5bf547a5.chunk.js","mappings":"+NAMAA,OAAOC,WAAaC,iBAOpB,MAAMC,EAAW,CACfC,IAAK,yBAA0BC,IAAK,iE,+FCThCC,EAAgBC,EAAAA,GAAYD,cAuBlC,EArBYE,IAAiC,IAAhC,aAAEC,GAAwBD,EAAPE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GACnC,OACIC,EAAAA,EAAAA,KAACC,EAAAA,WAAU,CAAAC,UACTF,EAAAA,EAAAA,KAACP,GAAaU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNN,GAAK,IACTO,MAAO,CACL,CACEC,IAAK,aACLC,KAAM,IACNC,MAAO,iBAGXC,OAAQZ,EACRa,WAAYb,EAAaa,WACzBC,OAAQA,EAAAA,QACRC,UAAW,CAAEC,KAAM,YCjBzBC,EAAOC,EAAAA,WAAoBC,SAASC,eAAe,SAEtCC,WACjB,MAAMrB,OFSkBqB,WACxB,MAAMC,GAAOC,EAAAA,EAAAA,GAAW,CACtBC,aAAcC,GAASC,EAAAA,QAAQD,MAAMA,KAGjCE,GAAoBpB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACrBb,GAAQ,IAAEkC,OAAQ,kBAAmBC,eAAgB,UAgC1D,OA7BAC,EAAAA,EAAAA,QAAmB,CACjBC,QAAS,CACPC,QAASL,EAAsB,kBAAmBA,EAAsB,uBAAqBpB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACxFb,GAAQ,IAAEkC,OAAQ,sBAAuBC,eAAgB,UAC3D,iBAEFtB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACIb,GAAQ,IAAEkC,OAAQ,gBAAiBC,eAAgBpC,eAM5DwC,EAAAA,EAAAA,QAAY,CACVX,OAAMY,SAAS9B,EAAAA,EAAAA,KAAC+B,EAAAA,KAAI,CAACC,MAAO,IACPC,MAAO,CACLC,SAAU,WACVC,KAAM,MACNC,QAAS,OACTC,UAAW,sBACNhB,MAAO,KAAMiB,OAAOtC,EAAAA,EAAAA,KAACuC,EAAAA,MAAK,IAAKC,kBAAoBC,IAC7E,MAAM,KAAEC,GAASD,EAIjB,OAHAA,EAASC,KAAO,CACdC,KAAoB,IAAdD,EAAKC,KAAa,IAAMD,EAAKC,KAAMC,IAAKF,EAAKE,IAAKC,QAASH,EAAKA,MAEjED,KAIJ,CACLvB,OAAM4B,MAAO,CAAC,EAAGC,KAAM,CAAC,EAAGtC,WAAY,CACrCuC,aAAc,aEjDSC,GACpBpC,EAAKqC,QAAOlD,EAAAA,EAAAA,KAACmD,EAAG,CAAC1C,WAAYb,EAAaa,WAAYb,aAAcA,MAG7EwD,CAAWD,E,mFCPX,MA4SA,EA5SqB,CACjBE,KAAM,gBACNC,QAAS,k0BAQTC,YAAa,0DACbC,YAAa,qBACbC,IAAK,g4IA6JLC,QAAS,CACLC,QAAQ,EACRC,UAAW,sBACX3B,MAAO,+DAGP4B,KAAM,CAAC,CACXtD,MAAO,eACPgD,YAAa,uFACbZ,KAAM,y8DA4DNmB,MAAO,CAAC,CACRT,KAAM,gBACNG,YAAa,iCACbO,gBAAiB,sDACjBC,UAAW,GACb,CACEX,KAAM,cACNG,YAAa,mBACbQ,UAAW,GACb,CACEX,KAAM,SACNG,YAAa,SACbQ,UAAW,KAEb,CACEzD,MAAO,oBACPgD,YAAa,6CACbZ,KAAM,w4BAgCNmB,MAAO,CAAC,CACRT,KAAM,gBACNG,YAAa,iCACbO,gBAAiB,sDACjBC,UAAW,GACb,CACEX,KAAM,SACNG,YAAa,SACbQ,UAAW,O","sources":["preset.js","App.js","bootstrap.js","../../README.md"],"sourcesContent":["import React from 'react';\nimport { preset as fetchPreset } from '@kne/react-fetch';\nimport { Spin, Empty, message } from 'antd';\nimport createAjax from '@kne/axios-fetch';\nimport { preset as remoteLoaderPreset } from '@kne/remote-loader';\n\nwindow.PUBLIC_URL = process.env.PUBLIC_URL;\n\n// url: 'https://registry.npmmirror.com',\n// tpl: '{{url}}/@kne-components%2f{{remote}}/{{version}}/files/build',\n\n// url: 'https://cdn.jsdelivr.net', tpl: '{{url}}/npm/@kne-components/{{remote}}@{{version}}/build'\n\nconst registry = {\n  url: 'https://uc.fatalent.cn', tpl: '{{url}}/packages/@kne-components/{{remote}}/{{version}}/build'\n};\n\nexport const globalInit = async () => {\n  const ajax = createAjax({\n    errorHandler: error => message.error(error)\n  });\n\n  const componentsCoreRemote = {\n    ...registry, remote: 'components-core', defaultVersion: '0.4.3'\n  };\n\n  remoteLoaderPreset({\n    remotes: {\n      default: componentsCoreRemote, 'components-core': componentsCoreRemote, 'components-iconfont': {\n        ...registry, remote: 'components-iconfont', defaultVersion: '0.2.1'\n      }, 'scroll-loader': process.env.NODE_ENV === 'development' ? {\n        remote: 'scroll-loader', url: '/', tpl: '{{url}}'\n      } : {\n        ...registry, remote: 'scroll-loader', defaultVersion: process.env.DEFAULT_VERSION\n      }\n    }\n  });\n\n\n  fetchPreset({\n    ajax, loading: <Spin delay={500}\n                         style={{\n                           position: 'absolute',\n                           left: '50%',\n                           padding: '10px',\n                           transform: 'translateX(-50%)'\n                         }} />, error: null, empty: <Empty />, transformResponse: (response) => {\n      const { data } = response;\n      response.data = {\n        code: data.code === 0 ? 200 : data.code, msg: data.msg, results: data.data\n      };\n      return response;\n    }\n  });\n\n  return {\n    ajax, enums: {}, apis: {}, themeToken: {\n      colorPrimary: '#4183F0'\n    }\n  };\n};\n","import { HashRouter } from \"react-router-dom\";\nimport createEntry from \"@kne/modules-dev/dist/create-entry.modern\";\nimport \"@kne/modules-dev/dist/create-entry.css\";\nimport readme from \"readme\";\n\nconst ExampleRoutes = createEntry.ExampleRoutes;\n\nconst App = ({ globalPreset, ...props }) => {\n  return (\n      <HashRouter>\n        <ExampleRoutes\n            {...props}\n            paths={[\n              {\n                key: \"components\",\n                path: \"/\",\n                title: \"首页\",\n              },\n            ]}\n            preset={globalPreset}\n            themeToken={globalPreset.themeToken}\n            readme={readme}\n            pageProps={{ menu: null }}\n        />\n      </HashRouter>\n  );\n};\n\nexport default App;\n","import { globalInit } from './preset';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nconst renderRoot = async (App) => {\n  const globalPreset = await globalInit();\n  return root.render(<App themeToken={globalPreset.themeToken} globalPreset={globalPreset} />);\n};\n\nrenderRoot(App);\n","import * as component_1 from '@kne/current-lib_scroll-loader';\nimport '@kne/current-lib_scroll-loader/dist/index.css';\nimport * as component_3 from '@kne/react-fetch';\nimport * as component_4 from 'lodash';\nimport '@kne/current-lib_scroll-loader/dist/index.css';\nconst readmeConfig = {\n    name: `scroll-loader`,\n    summary: `<p>一个用于实现滚动加载功能的React组件库。当用户滚动到页面底部时，自动加载更多数据，提供无限滚动的用户体验。</p>\n<h4>特点</h4>\n<ul>\n<li>支持自定义加载状态和无更多数据状态的显示</li>\n<li>提供基础的<code>ScrollLoader</code>组件和集成了数据获取功能的<code>FetchScrollLoader</code>组件</li>\n<li>支持国际化，内置中文和英文支持</li>\n<li>使用简单，配置灵活</li>\n</ul>`,\n    description: `滚动加载下一页数据.`,\n    packageName: `@kne/scroll-loader`,\n    api: `<h4>ScrollLoader</h4>\n<p>基础的滚动加载组件，当用户滚动到页面底部时触发加载更多数据的回调函数。</p>\n<h5>属性</h5>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>className</td>\n<td>string</td>\n<td>-</td>\n<td>自定义类名</td>\n</tr>\n<tr>\n<td>noMore</td>\n<td>boolean</td>\n<td>-</td>\n<td>是否没有更多数据，为true时不再触发加载</td>\n</tr>\n<tr>\n<td>onLoader</td>\n<td>function</td>\n<td>-</td>\n<td>加载更多数据的回调函数</td>\n</tr>\n<tr>\n<td>isLoading</td>\n<td>boolean</td>\n<td>-</td>\n<td>是否正在加载数据</td>\n</tr>\n<tr>\n<td>completeTips</td>\n<td>string</td>\n<td>\"已加载全部数据\"</td>\n<td>加载完成的提示文本</td>\n</tr>\n<tr>\n<td>maxFullCount</td>\n<td>number</td>\n<td>3</td>\n<td>当内容不足以滚动时，自动触发加载的最大次数</td>\n</tr>\n<tr>\n<td>children</td>\n<td>ReactNode</td>\n<td>-</td>\n<td>子元素，通常是数据列表</td>\n</tr>\n</tbody>\n</table>\n<h4>FetchScrollLoader</h4>\n<p>集成了数据获取功能的滚动加载组件，简化了<code>ScrollLoader</code>和<code>Fetch</code>组件的组合使用。</p>\n<h5>属性</h5>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>api</td>\n<td>object</td>\n<td>{ loader: () =&gt; ({ pageData: [], totalCount: 0 }) }</td>\n<td>数据获取API配置，必须包含loader函数</td>\n</tr>\n<tr>\n<td>dataFormat</td>\n<td>function</td>\n<td>(data) =&gt; ({ list: data.pageData, total: data.totalCount })</td>\n<td>数据格式化函数，将API返回的数据转换为组件需要的格式</td>\n</tr>\n<tr>\n<td>mergeList</td>\n<td>function</td>\n<td>(data, newData) =&gt; ({ ...newData, pageData: data.pageData.concat(newData.pageData) })</td>\n<td>合并列表数据的函数，用于将新加载的数据与现有数据合并</td>\n</tr>\n<tr>\n<td>searchProps</td>\n<td>object</td>\n<td>-</td>\n<td>搜索参数，会传递给API</td>\n</tr>\n<tr>\n<td>getSearchProps</td>\n<td>function</td>\n<td>-</td>\n<td>获取搜索参数的函数，接收searchProps作为参数，返回请求参数</td>\n</tr>\n<tr>\n<td>children</td>\n<td>function</td>\n<td>-</td>\n<td>渲染函数，接收{ fetchApi, list, data }作为参数，返回ReactNode</td>\n</tr>\n<tr>\n<td>render</td>\n<td>function</td>\n<td>({ fetchApi, children }) =&gt; children</td>\n<td>自定义渲染函数，可用于在ScrollLoader外层添加额外的UI元素</td>\n</tr>\n<tr>\n<td>pagination</td>\n<td>object</td>\n<td>{ paramsType: 'data', current: 'currentPage', pageSizeName: 'perPage', pageSize: 20 }</td>\n<td>分页配置</td>\n</tr>\n</tbody>\n</table>\n<h6>pagination属性详解</h6>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>paramsType</td>\n<td>string</td>\n<td>'data'</td>\n<td>分页参数在请求参数中的位置</td>\n</tr>\n<tr>\n<td>current</td>\n<td>string</td>\n<td>'currentPage'</td>\n<td>当前页码的参数名</td>\n</tr>\n<tr>\n<td>pageSizeName</td>\n<td>string</td>\n<td>'perPage'</td>\n<td>每页条数的参数名</td>\n</tr>\n<tr>\n<td>pageSize</td>\n<td>number</td>\n<td>20</td>\n<td>每页条数</td>\n</tr>\n</tbody>\n</table>`,\n    example: {\n        isFull: false,\n        className: `scroll_loader_f2ee2`,\n        style: `.scroll_loader_f2ee2 .scroll-list {\n  max-height: 300px;\n}`,\n        list: [{\n    title: `ScrollLoader`,\n    description: `滚动到底后自动加载下一页数据`,\n    code: `const { get, merge, range } = lodash;\nconst { default: Fetch } = _reactFetch;\nconst { default: ScrollLoader } = _ScrollLoader;\n\nconst BaseExample = () => {\n  return (<Fetch\n    loader={({ data }) => {\n      const params = Object.assign({\n        perPage: 20, currentPage: 1\n      }, data);\n      return new Promise((resolve) => {\n        const start = (params.currentPage - 1) * params.perPage;\n        setTimeout(() => {\n          resolve({\n            totalCount: 100, pageData: range(start, start + params.perPage).map((key) => {\n              return {\n                label: \\`第\\${key + 1}项\\`, value: key + 1\n              };\n            })\n          });\n        }, 500);\n      });\n    }}\n    render={(fetchApi) => {\n      const pagination = {\n        paramsType: 'data', current: 'currentPage', pageSize: 'perPage', defaultPageSize: 20\n      };\n      const current = get(fetchApi.requestParams, [pagination.paramsType, pagination.current], 1),\n        pageSize = get(fetchApi.requestParams, [pagination.paramsType, pagination.pageSize]) || pagination.defaultPageSize;\n\n      const formatData = {\n        list: fetchApi.data.pageData, total: fetchApi.data.totalCount\n      };\n      return (<ScrollLoader\n        className=\"scroll-list\"\n        isLoading={!fetchApi.isComplete}\n        noMore={!formatData.total || current * pageSize >= formatData.total}\n        onLoader={async () => {\n          await fetchApi.loadMore(merge({\n            data: {\n              [pagination.pageSize]: pageSize, [pagination.current]: current + 1\n            }\n          }), (data, newData) => {\n            return Object.assign({}, newData, {\n              pageData: data.pageData.concat(newData.pageData)\n            });\n          });\n        }}\n      >\n        {formatData.list.map((item) => {\n          return <div key={item.value}>{item.label}</div>;\n        })}\n      </ScrollLoader>);\n    }}\n  />);\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ScrollLoader\",\n    packageName: \"@kne/current-lib_scroll-loader\",\n    importStatement: \"import * as _ScrollLoader from \\\"@kne/scroll-loader\\\"\",\n    component: component_1\n},{\n    name: \"_reactFetch\",\n    packageName: \"@kne/react-fetch\",\n    component: component_3\n},{\n    name: \"lodash\",\n    packageName: \"lodash\",\n    component: component_4\n}]\n},{\n    title: `FetchScrollLoader`,\n    description: `封装了数据获取`,\n    code: `const { get, merge, range } = lodash;\nconst { FetchScrollLoader } = _ScrollLoader;\n\nconst BaseExample = () => {\n  return <FetchScrollLoader className=\"scroll-list\" api={{\n    loader: ({ data }) => {\n      const params = Object.assign({\n        perPage: 20, currentPage: 1\n      }, data);\n      return new Promise((resolve) => {\n        const start = (params.currentPage - 1) * params.perPage;\n        setTimeout(() => {\n          resolve({\n            totalCount: 100, pageData: range(start, start + params.perPage).map((key) => {\n              return {\n                label: \\`第\\${key + 1}项\\`, value: key + 1\n              };\n            })\n          });\n        }, 500);\n      });\n    }\n  }}>{({ list }) => {\n    return list.map((item) => {\n      return <div key={item.value}>{item.label}</div>;\n    });\n  }}</FetchScrollLoader>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ScrollLoader\",\n    packageName: \"@kne/current-lib_scroll-loader\",\n    importStatement: \"import * as _ScrollLoader from \\\"@kne/scroll-loader\\\"\",\n    component: component_1\n},{\n    name: \"lodash\",\n    packageName: \"lodash\",\n    component: component_4\n}]\n}]\n    }\n};\nexport default readmeConfig;\n"],"names":["window","PUBLIC_URL","process","registry","url","tpl","ExampleRoutes","createEntry","_ref","globalPreset","props","_objectWithoutProperties","_excluded","_jsx","HashRouter","children","_objectSpread","paths","key","path","title","preset","themeToken","readme","pageProps","menu","root","ReactDOM","document","getElementById","async","ajax","createAjax","errorHandler","error","message","componentsCoreRemote","remote","defaultVersion","remoteLoaderPreset","remotes","default","fetchPreset","loading","Spin","delay","style","position","left","padding","transform","empty","Empty","transformResponse","response","data","code","msg","results","enums","apis","colorPrimary","globalInit","render","App","renderRoot","name","summary","description","packageName","api","example","isFull","className","list","scope","importStatement","component"],"sourceRoot":""}