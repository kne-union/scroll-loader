"use strict";(self.webpackChunk_kne_components_scroll_loader=self.webpackChunk_kne_components_scroll_loader||[]).push([[690],{5690:(e,a,n)=>{n.r(a),n.d(a,{default:()=>l,manifest:()=>s});var t=n(96210),r=n(16052),o=n(94530);const l={ScrollLoader:{name:"scroll-loader",summary:'<h1>scroll-loader</h1>\n<h3>\u63cf\u8ff0</h3>\n<p>\u6eda\u52a8\u52a0\u8f7d\u4e0b\u4e00\u9875\u6570\u636e</p>\n<h3>\u5b89\u88c5</h3>\n<pre><code class="language-shell">npm i --save @kne/scroll-loader\n</code></pre>',description:"\u6eda\u52a8\u52a0\u8f7d\u4e0b\u4e00\u9875\u6570\u636e",packageName:"@kne/scroll-loader",api:"<table>\n<thead>\n<tr>\n<th>\u5c5e\u6027\u540d</th>\n<th>\u8bf4\u660e</th>\n<th>\u7c7b\u578b</th>\n<th>\u9ed8\u8ba4\u503c</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>",example:{isFull:!1,className:"scroll_loader_f2ee2",style:".scroll_loader_f2ee2 .scroll-list {\n  max-height: 300px;\n}",list:[{title:"ScrollLoader",description:"\u6eda\u52a8\u5230\u5e95\u540e\u81ea\u52a8\u52a0\u8f7d\u4e0b\u4e00\u9875\u6570\u636e",code:"const { get, merge, range } = lodash;\nconst { default: Fetch } = _reactFetch;\nconst { default: ScrollLoader } = _ScrollLoader;\n\nconst BaseExample = () => {\n  return (<Fetch\n    loader={({ data }) => {\n      const params = Object.assign({\n        perPage: 20, currentPage: 1\n      }, data);\n      return new Promise((resolve) => {\n        const start = (params.currentPage - 1) * params.perPage;\n        setTimeout(() => {\n          resolve({\n            totalCount: 100, pageData: range(start, start + params.perPage).map((key) => {\n              return {\n                label: `\u7b2c${key + 1}\u9879`, value: key + 1\n              };\n            })\n          });\n        }, 500);\n      });\n    }}\n    render={(fetchApi) => {\n      const pagination = {\n        paramsType: 'data', current: 'currentPage', pageSize: 'perPage', defaultPageSize: 20\n      };\n      const current = get(fetchApi.requestParams, [pagination.paramsType, pagination.current], 1),\n        pageSize = get(fetchApi.requestParams, [pagination.paramsType, pagination.pageSize]) || pagination.defaultPageSize;\n\n      const formatData = {\n        list: fetchApi.data.pageData, total: fetchApi.data.totalCount\n      };\n      return (<ScrollLoader\n        completeTips=\"\"\n        className=\"scroll-list\"\n        isLoading={!fetchApi.isComplete}\n        noMore={!formatData.total || current * pageSize >= formatData.total}\n        onLoader={async () => {\n          await fetchApi.loadMore(merge({\n            data: {\n              [pagination.pageSize]: pageSize, [pagination.current]: current + 1\n            }\n          }), (data, newData) => {\n            return Object.assign({}, newData, {\n              pageData: data.pageData.concat(newData.pageData)\n            });\n          });\n        }}\n      >\n        {formatData.list.map((item) => {\n          return <div key={item.value}>{item.label}</div>;\n        })}\n      </ScrollLoader>);\n    }}\n  />);\n};\n\nrender(<BaseExample />);\n\n",scope:[{name:"_ScrollLoader",packageName:"@kne/current-lib_scroll-loader",importStatement:'import * as _ScrollLoader from "@kne/scroll-loader"',component:t},{name:"_reactFetch",packageName:"@kne/react-fetch",component:r},{name:"lodash",packageName:"lodash",component:o}]},{title:"FetchScrollLoader",description:"\u5c01\u88c5\u4e86\u6570\u636e\u83b7\u53d6",code:'const { get, merge, range } = lodash;\nconst { FetchScrollLoader } = _ScrollLoader;\n\nconst BaseExample = () => {\n  return <FetchScrollLoader className="scroll-list" api={{\n    loader: ({ data }) => {\n      const params = Object.assign({\n        perPage: 20, currentPage: 1\n      }, data);\n      return new Promise((resolve) => {\n        const start = (params.currentPage - 1) * params.perPage;\n        setTimeout(() => {\n          resolve({\n            totalCount: 100, pageData: range(start, start + params.perPage).map((key) => {\n              return {\n                label: `\u7b2c${key + 1}\u9879`, value: key + 1\n              };\n            })\n          });\n        }, 500);\n      });\n    }\n  }}>{({ list }) => {\n    return list.map((item) => {\n      return <div key={item.value}>{item.label}</div>;\n    });\n  }}</FetchScrollLoader>;\n};\n\nrender(<BaseExample />);\n\n',scope:[{name:"_ScrollLoader",packageName:"@kne/current-lib_scroll-loader",importStatement:'import * as _ScrollLoader from "@kne/scroll-loader"',component:t},{name:"lodash",packageName:"lodash",component:o}]}]}}},s={name:"scroll-loader",version:"0.1.6","open-version":!0,"public-url":"/scroll-loader",modules:[{name:"scroll-loader",baseDir:"/home/runner/work/scroll-loader/scroll-loader",description:"\u6eda\u52a8\u52a0\u8f7d\u4e0b\u4e00\u9875\u6570\u636e",packageName:"@kne/scroll-loader"}]}}}]);
//# sourceMappingURL=690.30a9b5e2.chunk.js.map