{"version":3,"file":"static/js/416.5c79b495.chunk.js","mappings":"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","sources":["../../src/ScrollLoader.js","../../src/FetchScrollLoader.js"],"sourcesContent":["import React, { forwardRef, useEffect, useImperativeHandle, useRef } from 'react';\nimport { Space, Spin } from 'antd';\nimport SimpleBar from 'simplebar-react';\nimport style from './style.module.scss';\nimport { useThrottledCallback } from 'use-debounce';\nimport useRefCallback from '@kne/use-ref-callback';\nimport classnames from 'classnames';\nimport 'simplebar-react/dist/simplebar.min.css';\n\nconst FullDataInList = ({ getScrollerRef, loadMore, maxFullCount }) => {\n  const loaderHandler = useRefCallback(loadMore);\n  const getScroller = useRefCallback(getScrollerRef);\n  useEffect(() => {\n    let maxCount = maxFullCount;\n    const scroller = getScroller();\n    const loadMore = async () => {\n      if (scroller.clientHeight === scroller.scrollHeight && maxCount > 0) {\n        await loaderHandler().then(() => {\n          return new Promise(resolve => {\n            setTimeout(resolve, 500);\n          });\n        });\n        maxCount--;\n        await loadMore();\n      }\n    };\n    loadMore();\n  }, [maxFullCount, loaderHandler, getScroller]);\n  return null;\n};\n\nconst ScrollLoader = forwardRef((props, ref) => {\n  const locale = Object.assign(\n    {},\n    {\n      loadComplete: '加载完成'\n    },\n    props.locale\n  );\n  const { className, noMore, onLoader, isLoading, completeTips, maxFullCount, children } = Object.assign(\n    {},\n    {\n      maxFullCount: 3,\n      completeTips: locale.loadComplete\n    },\n    props,\n    { locale }\n  );\n  const scrollerRef = useRef();\n  const onLoaderHandler = useRefCallback(onLoader);\n  const canLoadRef = useRef(!noMore && !isLoading);\n  canLoadRef.current = !noMore && !isLoading;\n\n  useImperativeHandle(ref, () => {\n    return scrollerRef.current;\n  }, []);\n  const scrollHandler = useThrottledCallback(e => {\n    const el = e.target;\n    if (canLoadRef.current && el.clientHeight + el.scrollTop + 20 > el.scrollHeight) {\n      onLoaderHandler();\n    }\n  }, 100);\n  return (\n    <SimpleBar\n      className={classnames('load-container', className)}\n      scrollableNodeProps={{\n        ref: scrollerRef,\n        onScroll: scrollHandler\n      }}\n    >\n      {!isLoading && !noMore && <FullDataInList maxFullCount={maxFullCount} getScrollerRef={() => scrollerRef.current} loadMore={onLoaderHandler} />}\n      <Space direction=\"vertical\">\n        <div>{children}</div>\n        {isLoading ? (\n          <div className={style['scroller-no-more']}>\n            <Spin size=\"small\" />\n          </div>\n        ) : null}\n        {noMore && completeTips ? <div className={style['scroller-no-more']}>{completeTips}</div> : null}\n      </Space>\n    </SimpleBar>\n  );\n});\n\nexport default ScrollLoader;\n","import React from 'react';\nimport Fetch from '@kne/react-fetch';\nimport ScrollLoader from './ScrollLoader';\nimport get from 'lodash/get';\nimport merge from 'lodash/merge';\nimport {isNotEmpty} from '@kne/is-empty';\n\nconst FetchScrollLoader = props => {\n    const {dataFormat, mergeList, completeTips, api, searchProps, getSearchProps, children, ...others} = Object.assign(\n        {},\n        {\n            api: {\n                loader: () => {\n                    return {\n                        pageData: [],\n                        totalCount: 0\n                    };\n                }\n            },\n            mergeList: (data, newData) => {\n                return Object.assign({}, newData, {\n                    pageData: data.pageData.concat(newData.pageData)\n                });\n            },\n            dataFormat: data => {\n                return {\n                    list: data.pageData,\n                    total: data.totalCount\n                };\n            },\n            children: props => {\n                console.log(props);\n                return null;\n            }\n        },\n        props\n    );\n\n    const pagination = Object.assign(\n        {},\n        {\n            paramsType: 'data',\n            current: 'currentPage',\n            pageSizeName: 'perPage',\n            pageSize: 20\n        },\n        props.pagination\n    );\n\n    const computedSearchProps = searchProps => {\n        if (getSearchProps && isNotEmpty(searchProps)) {\n            const requestProps = getSearchProps(searchProps);\n            return isNotEmpty(requestProps) ? {[pagination.paramsType]: requestProps} : {};\n        }\n        return {};\n    };\n\n    return (\n        <Fetch\n            {...Object.assign({}, api, computedSearchProps(searchProps))}\n            render={fetchApi => {\n                const formatData = dataFormat(fetchApi.data);\n                const current = get(fetchApi.requestParams, [pagination.paramsType, pagination.current], 1),\n                    pageSize = get(fetchApi.requestParams, [pagination.paramsType, pagination.pageSizeName]) || pagination.pageSize;\n\n                const noMore = !formatData.total || current * pageSize >= formatData.total;\n                const onLoader = async () => {\n                    await fetchApi.loadMore(\n                        merge(\n                            {},\n                            computedSearchProps(searchProps),\n                            {\n                                [pagination.paramsType]: {\n                                    [pagination.pageSizeName]: pageSize,\n                                    [pagination.current]: current + 1\n                                }\n                            }\n                        ),\n                        mergeList\n                    );\n                };\n\n                return (\n                    <ScrollLoader {...others} completeTips={completeTips} isLoading={!fetchApi.isComplete}\n                                  noMore={noMore} onLoader={onLoader}>\n                        {children({fetchApi, list: formatData.list, data: fetchApi.data})}\n                    </ScrollLoader>\n                );\n            }}\n        />\n    );\n};\n\nexport default FetchScrollLoader;\n"],"names":["FullDataInList","_ref","getScrollerRef","loadMore","maxFullCount","loaderHandler","useRefCallback","getScroller","useEffect","maxCount","scroller","async","clientHeight","scrollHeight","then","Promise","resolve","setTimeout","ScrollLoader","forwardRef","props","ref","locale","Object","assign","loadComplete","className","noMore","onLoader","isLoading","completeTips","children","scrollerRef","useRef","onLoaderHandler","canLoadRef","current","useImperativeHandle","scrollHandler","useThrottledCallback","e","el","target","scrollTop","React","SimpleBar","classnames","scrollableNodeProps","onScroll","Space","direction","style","Spin","size","FetchScrollLoader","_Object$assign","api","loader","pageData","totalCount","mergeList","data","newData","concat","dataFormat","list","total","console","log","searchProps","getSearchProps","others","_objectWithoutPropertiesLoose","_excluded","pagination","paramsType","pageSizeName","pageSize","computedSearchProps","isNotEmpty","requestProps","Fetch","_extends","render","fetchApi","formatData","get","requestParams","isComplete","merge"],"sourceRoot":""}